{"version":3,"sources":["components/Link/index.tsx","components/ShowLambdas/index.tsx","components/Section/index.tsx","components/sections/Introduction/index.tsx","components/CodeBlock/index.tsx","components/Label/index.tsx","components/βReduction/index.tsx","components/IDENTITY/index.tsx","components/sections/Basics/index.tsx","components/numbers/index.tsx","components/numbers/SUCCESSOR/index.tsx","components/sections/Numbers/index.tsx","components/logic/TRUE/index.tsx","components/logic/FALSE/index.tsx","components/logic/AND/index.tsx","components/logic/OR/index.tsx","components/logic/IF_THEN_ELSE/index.tsx","components/sections/Logic/index.tsx","components/sections/Pairs/index.tsx","components/sections/Recursion/index.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["Link","to","children","external","linkProps","href","target","rel","undefined","className","ShowLambdasContext","React","createContext","showAll","setShowAll","ShowLambdas","useState","Provider","value","Section","heading","Introduction","CodeBlock","expressions","IDENTITY","ZERO","ONE","TWO","THREE","SUCCESSOR","TRUE","FALSE","AND","OR","IF_THEN_ELSE","PAIR","FIRST","SECOND","Label","name","showλ","setShowλ","useContext","onClick","onKeyPress","event","key","tabIndex","βReduction","λ","application","args","reduce","accumulator","current","displayName","x","Basics","f","n","Numbers","y","p","q","a","b","Logic","Pairs","Recursion","App","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"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","file":"static/js/main.c45c4821.chunk.js","sourcesContent":["import React, { FC, ReactNode } from \"react\";\nimport \"./Link.css\";\n\ninterface LinkProps {\n  to: string;\n  children: ReactNode;\n  external?: boolean;\n}\n\nconst Link: FC<LinkProps> = ({ to, children, external = true }) => {\n  const linkProps = {\n    href: to,\n    target: external ? \"_blank\" : \"_self\",\n    rel: external ? \"noopener noreferrer\" : undefined,\n  };\n\n  return (\n    <a className=\"link\" {...linkProps}>\n      {children}\n    </a>\n  );\n};\n\nexport default Link;\n","import React, { useState, FC, ReactNode } from \"react\";\n\ntype ShowLambdas = {\n  showAll: boolean;\n  setShowAll: ((val: boolean) => void) | null;\n};\n\nexport const ShowLambdasContext = React.createContext<ShowLambdas>({\n  showAll: false,\n  setShowAll: null,\n});\n\ninterface ShowLambdasProps {\n  children: ReactNode;\n}\n\nconst ShowLambdas: FC<ShowLambdasProps> = ({ children }) => {\n  const [showAll, setShowAll] = useState(false);\n\n  return (\n    <ShowLambdasContext.Provider value={{ showAll, setShowAll }}>\n      {children}\n    </ShowLambdasContext.Provider>\n  );\n};\n\nexport default ShowLambdas;\n","import React, { FC, ReactNode } from \"react\";\nimport ShowLambdas from \"../ShowLambdas\";\nimport \"./Section.css\";\n\ninterface SectionProps {\n  heading: string;\n  children: ReactNode;\n}\n\nconst Section: FC<SectionProps> = ({ heading, children }) => (\n  <section>\n    <h2>{heading}</h2>\n    <ShowLambdas>{children}</ShowLambdas>\n  </section>\n);\n\nexport default Section;\n","import React, { FC } from \"react\";\nimport Section from \"../../Section\";\nimport Link from \"../../Link\";\n\nconst Introduction: FC = () => (\n  <Section heading={\"Introduction\"}>\n    <p>\n      This project is an attempt to implement something <b>close</b> to{\" \"}\n      <Link to=\"https://en.wikipedia.org/wiki/Lambda_calculus\">\n        lambda calculus\n      </Link>{\" \"}\n      in <Link to=\"https://reactjs.org/\">React</Link>. Why? Why not? Mostly for\n      fun, but also to learn more about both. The idea for this was heavily\n      inspired by Jim Weirich's amazing talk{\" \"}\n      <Link to=\"https://www.youtube.com/watch?v=FITJMJjASUs\">\n        Y Not - Adventures in Functional Programming\n      </Link>\n      .\n    </p>\n    <p>\n      To jump right into the code, follow these links to the various React\n      components:\n    </p>\n    <ul>\n      <li>\n        <Link to=\"https://github.com/thoughtbyte/lambda-calculus-in-react/blob/master/src/components/%CE%B2Reduction/index.tsx\">\n          βReduction\n        </Link>\n      </li>\n      <li>\n        <Link to=\"https://github.com/thoughtbyte/lambda-calculus-in-react/blob/master/src/components/IDENTITY/index.tsx\">\n          IDENTITY\n        </Link>\n      </li>\n      <li>\n        <Link to=\"https://github.com/thoughtbyte/lambda-calculus-in-react/tree/master/src/components/numbers\">\n          numbers\n        </Link>\n      </li>\n      <li>\n        <Link to=\"https://github.com/thoughtbyte/lambda-calculus-in-react/tree/master/src/components/logic\">\n          logic\n        </Link>\n      </li>\n      <li>pairs: in progress</li>\n      <li>recursion: in progress</li>\n    </ul>\n    <p>\n      The code snippets in this tutorial omit some things like type checking for\n      readability.\n    </p>\n    <p>\n      Feedback? Email{\" \"}\n      <Link to=\"mailto:vgabruzzo@gmail.com\" external={false}>\n        vgabruzzo@gmail.com\n      </Link>\n    </p>\n  </Section>\n);\n\nexport default Introduction;\n","import React, { FC, ReactNode } from \"react\";\nimport \"./CodeBlock.css\";\n\ninterface CodeBlockProps {\n  children: ReactNode;\n}\n\nconst CodeBlock: FC<CodeBlockProps> = ({ children }) => (\n  <span className=\"codeBlock\">{children}</span>\n);\n\nexport default CodeBlock;\n","import React, { FC, useState, useContext, KeyboardEvent } from \"react\";\nimport { ShowLambdasContext } from \"../ShowLambdas\";\nimport \"./Label.css\";\n\ninterface LabelProps {\n  name: string;\n}\n\nconst expressions: { [key: string]: string } = {\n  IDENTITY: \"λx.x\",\n  ZERO: \"λf.λx.x\",\n  ONE: \"λf.λx.f x\",\n  TWO: \"λf.λx.f (f x)\",\n  THREE: \"λf.λx.f (f (f x))\",\n  SUCCESSOR: \"λn.λf.λx.f (n f x)\",\n  TRUE: \"λx.λy.x\",\n  FALSE: \"λx.λy.y\",\n  AND: \"λp.λq.p q p\",\n  OR: \"λp.λq.p p q\",\n  IF_THEN_ELSE: \"λp.λa.λb.p a b\",\n  PAIR: \"λx.λy.λf.f x y\",\n  FIRST: \"λp.p (λx.λy.x x y)\",\n  SECOND: \"λp.p (λx.λy.y x y)\",\n};\n\nconst Label: FC<LabelProps> = ({ name }) => {\n  const [showλ, setShowλ] = useState(false);\n  const { showAll } = useContext(ShowLambdasContext);\n\n  const handleClick = () =>\n    name !== \"ANONYMOUS\" && !showAll && setShowλ(!showλ);\n\n  const handleKeyPress = (event: KeyboardEvent) =>\n    name !== \"ANONYMOUS\" &&\n    (event.key === \"Enter\" || event.key === \" \") &&\n    !showAll &&\n    setShowλ(!showλ);\n\n  return (\n    <span\n      className=\"label\"\n      onClick={handleClick}\n      onKeyPress={handleKeyPress}\n      tabIndex={0}\n    >\n      {showλ || showAll ? expressions[name] : name}\n    </span>\n  );\n};\n\nexport default Label;\n","import React, { FC } from \"react\";\nimport Label from \"../Label\";\nimport { LambdaTerm, Abstraction } from \"../../types\";\n\ninterface βReductionProps {\n  λ: Abstraction;\n  args: LambdaTerm[];\n}\n\nconst βReduction: FC<βReductionProps> = ({ λ, args }) => {\n  const application = args.reduce(\n    (accumulator: any, current: LambdaTerm) => accumulator(current),\n    λ\n  );\n\n  /**\n   * Since application is usually a function, the lambda expression React\n   * components have display names to render instead.\n   * Sometimes, the application may be a string or number. We don't really have\n   * these in lambda calculus, but they are used for demo purposes.\n   */\n  return typeof application === \"function\" ? (\n    <Label name={application.displayName || \"ANONYMOUS\"} />\n  ) : (\n    application\n  );\n};\n\nexport default βReduction;\n","import React, { FC } from \"react\";\nimport βReduction from \"../βReduction\";\nimport { LambdaExprProps } from \"../../types\";\n\nconst IDENTITY: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={x => x} args={args} />\n);\n\nIDENTITY.displayName = \"IDENTITY\";\n\nexport default IDENTITY;\n","import React, { FC } from \"react\";\nimport CodeBlock from \"../../CodeBlock\";\nimport Section from \"../../Section\";\nimport Label from \"../../Label\";\nimport Link from \"../../Link\";\nimport IDENTITY from \"../../IDENTITY\";\n\nconst Basics: FC = () => (\n  <Section heading={\"Basics\"}>\n    <p>\n      Lambda calculus can simulate any{\" \"}\n      <Link to=\"https://en.wikipedia.org/wiki/Turing_machine\">\n        Turing machine\n      </Link>\n      . It does so with only three components:\n    </p>\n    <ul>\n      <li>\n        variables: <code>x</code>\n      </li>\n      <li>\n        function abstraction: <code>λx.x</code>\n      </li>\n      <li>\n        function application: <code>λx.x 1</code>\n      </li>\n    </ul>\n    <p>\n      The lambda symbol above signifies that the variable <code>x</code> is\n      bound to the <code>x</code> in the body of the function abstraction. This\n      example is the identity function, it returns whatever argument is passed\n      in. The function application evaluates to <code>1</code>. This process of\n      replacing variables with their arguments and evaluating the expression is\n      called β-reduction.\n    </p>\n    <p>\n      Implementing lambda calculus in React begins with building a β-reduction\n      component. Here is the identity function being applied with the argument{\" \"}\n      <code>1</code> in React:\n      <CodeBlock>{`<βReduction λ={x => x} args={[1]} />`}</CodeBlock>\n      And here is what this component looks like under the hood:\n      <CodeBlock>\n        {`const βReduction: FC<βReductionProps> = ({ λ, args }) => {\n  const application = args.reduce(\n    (accumulator, current) => accumulator(current),\n    λ\n  );\n\n  return application;\n};`}\n      </CodeBlock>\n      <code>βReduction</code> calls <code>reduce</code> which in turn calls the\n      lambda prop on the first argument passed in. For each subsequent argument,\n      it calls the result of the previous iteration on that argument. Hence, the\n      result of calling a lambda on an argument is another lambda function\n      (except for possibly the last iteration, but only because this allows it\n      to render strings and numbers for demo purposes).\n    </p>\n    <p>\n      On the left side of the → below is the lambda expression for the identity\n      function with <code>1</code> passed in as an argument. Lambda expressions\n      are always anonymous but I've included labels for readability. Click on\n      any label and you'll reveal the lambda expression. On the right side of\n      the → is the <code>βReduction</code> component being rendered by React\n      with <code>x => x</code> passed as the <code>λ</code> prop and{\" \"}\n      <code>[1]</code> passed as the <code>args</code> prop.\n      <CodeBlock>\n        <Label name=\"IDENTITY\" /> 1 → <IDENTITY args={[1]} />\n      </CodeBlock>\n    </p>\n    <p>\n      There are React components for common lambda expressions. Here's the{\" \"}\n      <code>\n        <Label name=\"IDENTITY\" />\n      </code>{\" \"}\n      component:\n      <CodeBlock>\n        {`const IDENTITY: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={x => x} args={args} />\n);`}\n      </CodeBlock>\n      And here is the{\" \"}\n      <code>\n        <Label name=\"IDENTITY\" />\n      </code>{\" \"}\n      component being rendered with itself as an argument. Unsurprisingly, it\n      returns itself. Note: since{\" \"}\n      <code>\n        <Label name=\"IDENTITY\" />\n      </code>{\" \"}\n      is a function and we can't render functions, the <code>βReduction</code>{\" \"}\n      component actually renders its <code>displayName</code> property:\n      <CodeBlock>\n        <Label name=\"IDENTITY\" /> <Label name=\"IDENTITY\" /> →{\" \"}\n        <IDENTITY args={[IDENTITY]} />\n      </CodeBlock>\n      The JSX React is rendering on the right side of the arrow:\n      <CodeBlock>{`<IDENTITY args={[IDENTITY]} />`}</CodeBlock>\n    </p>\n    <p>\n      We can nest these lambdas as much as we'd like. For example:\n      <CodeBlock>\n        <Label name=\"IDENTITY\" /> (<Label name=\"IDENTITY\" />{\" \"}\n        <Label name=\"IDENTITY\" />\n        ) → <IDENTITY args={[<IDENTITY args={[IDENTITY]} />]} />\n      </CodeBlock>\n      And the JSX for this β-reduction:\n      <CodeBlock>\n        {`<IDENTITY args={[<IDENTITY args={[IDENTITY]} />]} />`}\n      </CodeBlock>\n    </p>\n    <p>\n      That's it for the very basics of lambda calculus: variables, functions,\n      and function application. There's not much to it. Nor is there much to\n      implementing something like it with React components. We've already used\n      something other than these three things though: numbers. We cheated. Next\n      we'll learn how to represent numbers in lambda calculus.\n    </p>\n  </Section>\n);\n\nexport default Basics;\n","import React, { FC } from \"react\";\nimport βReduction from \"../βReduction\";\nimport { LambdaExprProps } from \"../../types\";\n\nconst ZERO: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={f => x => x} args={args} />\n);\n\nZERO.displayName = \"ZERO\";\n\nconst ONE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={f => x => {\n      if (typeof f === \"function\") {\n        return f(x);\n      }\n    }}\n    args={args}\n  />\n);\n\nONE.displayName = \"ONE\";\n\nconst TWO: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={f => x => {\n      if (typeof f === \"function\") {\n        return f(f(x));\n      }\n    }}\n    args={args}\n  />\n);\n\nTWO.displayName = \"TWO\";\n\nconst THREE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={f => x => {\n      if (typeof f === \"function\") {\n        return f(f(f(x)));\n      }\n    }}\n    args={args}\n  />\n);\n\nTHREE.displayName = \"THREE\";\n\nconst NumberLabels = [\"ZERO\", \"ONE\", \"TWO\", \"THREE\"];\n\nconst numberCounter = () => {\n  let i = 1;\n\n  return () => NumberLabels[i++];\n};\n\nexport { ZERO, ONE, TWO, THREE, numberCounter };\n","import React, { FC } from \"react\";\nimport βReduction from \"../../βReduction\";\nimport { LambdaExprProps } from \"../../../types\";\n\nconst SUCCESSOR: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={n => f => x => {\n      if (typeof f === \"function\" && typeof n === \"function\") {\n        return f(n({ args: [f, x] }));\n      }\n    }}\n    args={args}\n  />\n);\n\nSUCCESSOR.displayName = \"SUCCESSOR\";\n\nexport default SUCCESSOR;\n","import React, { FC } from \"react\";\nimport CodeBlock from \"../../CodeBlock\";\nimport Section from \"../../Section\";\nimport Label from \"../../Label\";\nimport Link from \"../../Link\";\nimport { ONE, TWO } from \"../../numbers\";\nimport SUCCESSOR from \"../../numbers/SUCCESSOR\";\nimport IDENTITY from \"../../IDENTITY\";\n\nconst Numbers: FC = () => (\n  <Section heading={\"Numbers\"}>\n    <p>\n      One common approach to encoding numbers, and other data and operators, is{\" \"}\n      <Link to=\"https://en.wikipedia.org/wiki/Church_encoding\">\n        Church encoding\n      </Link>\n      . A Church encoding for a number is a function that takes two arguments,{\" \"}\n      <code>f</code> and <code>x</code>, and applies <code>f</code> to{\" \"}\n      <code>x</code> any number of times. To represent <code>1</code> it applies\n      once, <code>2</code> twice, and so on. <code>0</code> is represented by\n      the lambda that doesn't apply <code>f</code> to <code>x</code>. Here are\n      the lambda expressions:\n    </p>\n    <ul>\n      <li>\n        <code>0</code>: <code>λf.λx.x</code>\n      </li>\n      <li>\n        <code>1</code>: <code>λf.λx.f x</code>\n      </li>\n      <li>\n        <code>2</code>: <code>λf.λx.f (f x)</code>\n      </li>\n      <li>\n        <code>3</code>: <code>λf.λx.f (f (f x))</code>\n      </li>\n    </ul>\n    <p>\n      The{\" \"}\n      <code>\n        <Label name=\"IDENTITY\" />\n      </code>{\" \"}\n      lambda only takes in one argument. To represent numbers, we take in two.\n      However, lambda expressions can only take in one argument. Lambdas that\n      require two arguments are{\" \"}\n      <Link to=\"https://en.wikipedia.org/wiki/Currying\">curried</Link>. That is,\n      they take in one argument, then return a function that takes in the second\n      argument, and so on. This is how we represent these lambdas in JavaScript:\n    </p>\n    <ul>\n      <li>\n        <code>0</code>: <code>f => x => x</code>\n      </li>\n      <li>\n        <code>1</code>: <code>f => x => f(x)</code>\n      </li>\n      <li>\n        <code>2</code>: <code>f => x => f(f(x))</code>\n      </li>\n      <li>\n        <code>3</code>: <code>f => x => f(f(f(x)))</code>\n      </li>\n    </ul>\n    <p>\n      To represent these numbers as React components, we pass the JavaScript\n      representations of the lambdas to the <code>λ</code> prop of the{\" \"}\n      <code>βReduction</code> component:\n      <CodeBlock>\n        {`const ZERO: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={f => x => x} args={args} />\n);\n\nconst ONE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={f => x => f(x)} args={args} />\n);\n\nconst TWO: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={f => x => f(f(x))} args={args} />\n);`}\n      </CodeBlock>\n    </p>\n    <p>\n      We can now avoid cheating and pass the{\" \"}\n      <code>\n        <Label name=\"ONE\" />\n      </code>{\" \"}\n      lambda to{\" \"}\n      <code>\n        <Label name=\"IDENTITY\" />\n      </code>\n      :\n      <CodeBlock>\n        <Label name=\"IDENTITY\" /> <Label name=\"ONE\" /> →{\" \"}\n        <IDENTITY args={[ONE]} />\n      </CodeBlock>\n    </p>\n    <p>\n      And the JSX being rendered on the right side:\n      <CodeBlock>{`<IDENTITY args={[ONE]} />`}</CodeBlock>\n    </p>\n    <p>\n      So we have numbers, or at least a few of them, and we have an{\" \"}\n      <code>\n        <Label name=\"IDENTITY\" />\n      </code>{\" \"}\n      function. Let's do something more interesting. Let's make a function that\n      will give us the successor to any number we pass into it. The lambda\n      expression for this: <CodeBlock>{`λn.λf.λx.f (n f x)`}</CodeBlock> This\n      lambda takes three arguments: a number, a function, and something to apply\n      the function to. Suppose you pass in{\" \"}\n      <code>\n        <Label name=\"TWO\" />\n      </code>{\" \"}\n      as the first argument. That would reduce to:{\" \"}\n      <CodeBlock>{`λf.λx.f (TWO f x)`}</CodeBlock> Then, for whatever{\" \"}\n      <code>f</code> and <code>x</code> we pass in, we apply <code>f</code> to\n      whatever{\" \"}\n      <code>\n        <Label name=\"TWO\" />\n      </code>{\" \"}\n      returns when we pass <code>f</code> and <code>x</code> to it.{\" \"}\n      <code>\n        <Label name=\"TWO\" />\n      </code>{\" \"}\n      returns the application of <code>f</code> to <code>x</code> twice. So...\n      we apply <code>f</code> to the application of <code>f</code> to{\" \"}\n      <code>x</code> twice. That is, the successor lambda when given the\n      argument{\" \"}\n      <code>\n        <Label name=\"TWO\" />\n      </code>{\" \"}\n      returns a function that takes an <code>f</code> and an <code>x</code> and\n      returns three applications of <code>f</code> to <code>x</code>. That is,\n      it returns the Church encoding for <code>3</code>.\n    </p>\n    <p>\n      As a React component:\n      <CodeBlock>\n        {`const SUCCESSOR: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={n => f => x => f({ args: [n({ args: [f, x] })] })}}\n    args={args}\n  />\n);`}\n      </CodeBlock>\n      One important thing to note here is that we can't just pass arguments\n      directly to our functions in many cases, since <code>βReduction</code>{\" \"}\n      expects an <code>args</code> prop that it reduces over. Further, our\n      functions are curried, so passing multiple arguments normally wouldn't\n      work. Rendering our component:\n      <CodeBlock>\n        <Label name=\"SUCCESSOR\" /> <Label name=\"TWO\" /> →{\" \"}\n        <SUCCESSOR args={[TWO]} />\n      </CodeBlock>\n      Even though we have a{\" \"}\n      <code>\n        <Label name=\"THREE\" />\n      </code>{\" \"}\n      component, lambda expressions and our components may return new anonymous\n      functions, so we can't display the name here. However, if we{\" \"}\n      <code>.toString()</code> the actual function being returned, we get:\n      <CodeBlock>{`f => x => f({ args: [n({ args: [f, x] })] })`}</CodeBlock>{\" \"}\n      Since we know that <code>n</code> refers to{\" \"}\n      <code>\n        <Label name=\"TWO\" />\n      </code>{\" \"}\n      we know that the anonymous function here is equivalent to{\" \"}\n      <code>\n        <Label name=\"THREE\" />\n      </code>\n      .\n    </p>\n    {/* <p>\n      Recall that our React number components take in two arguments, a function\n      and something to call that function on. It doesn't really matter what\n      these are. We're going to cheat a bit and pass in a function that will\n      count the number of times it's been called and return that number as a\n      string. If we pass that and any other value as <code>x</code> to our\n      numbers, we will render the number of times the function has been called:\n      <CodeBlock>\n        <Label name=\"ONE\" /> numberCounter() 'any value' →{\" \"}\n        <ONE args={[numberCounter(), \"any value\"]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"TWO\" /> numberCounter() 'any value' →{\" \"}\n        <TWO args={[numberCounter(), \"any value\"]} />\n      </CodeBlock>\n      Here's the JSX being rendered in the last example, this outputs what you\n      see on the right side:\n      <CodeBlock>{`<TWO args={[numberCounter(), \"any value\"]} />`}</CodeBlock>A\n      more complex example:\n      <CodeBlock>\n        <Label name=\"SUCCESSOR\" /> (<Label name=\"SUCCESSOR\" />{\" \"}\n        <Label name=\"THREE\" />) → <SUCCESSOR args={[THREE]} />\n      </CodeBlock>\n      Unfortunately, <code>numberCounter</code> doesn't yet work with{\" \"}\n      <code>\n        <Label name=\"SUCCESSOR\" />\n      </code>\n      .\n    </p> */}\n    <p>\n      Addition, subtraction, and multiplication components will be added here in\n      the future.\n    </p>\n  </Section>\n);\n\nexport default Numbers;\n","import React, { FC } from \"react\";\nimport βReduction from \"../../βReduction\";\nimport { LambdaExprProps } from \"../../../types\";\n\nconst TRUE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={x => y => x} args={args} />\n);\n\nTRUE.displayName = \"TRUE\";\n\nexport default TRUE;\n","import React, { FC } from \"react\";\nimport βReduction from \"../../βReduction\";\nimport { LambdaExprProps } from \"../../../types\";\n\nconst FALSE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={x => y => y} args={args} />\n);\n\nFALSE.displayName = \"FALSE\";\n\nexport default FALSE;\n","import React, { FC } from \"react\";\nimport βReduction from \"../../βReduction\";\nimport { LambdaExprProps } from \"../../../types\";\n\nconst AND: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={p => q => {\n      if (typeof p === \"function\") {\n        return p({ args: [q, p] });\n      }\n    }}\n    args={args}\n  />\n);\n\nAND.displayName = \"AND\";\n\nexport default AND;\n","import React, { FC } from \"react\";\nimport βReduction from \"../../βReduction\";\nimport { LambdaExprProps } from \"../../../types\";\n\nconst OR: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={p => q => {\n      if (typeof p === \"function\") {\n        return p({ args: [p, q] });\n      }\n    }}\n    args={args}\n  />\n);\n\nOR.displayName = \"OR\";\n\nexport default OR;\n","import React, { FC } from \"react\";\nimport βReduction from \"../../βReduction\";\nimport { LambdaExprProps } from \"../../../types\";\n\nconst IF_THEN_ELSE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={p => a => b => {\n      if (typeof p === \"function\") {\n        return p({ args: [a, b] });\n      }\n    }}\n    args={args}\n  />\n);\n\nIF_THEN_ELSE.displayName = \"IF_THEN_ELSE\";\n\nexport default IF_THEN_ELSE;\n","import React, { FC } from \"react\";\nimport CodeBlock from \"../../CodeBlock\";\nimport Section from \"../../Section\";\nimport Label from \"../../Label\";\nimport IDENTITY from \"../../IDENTITY\";\nimport { ZERO, ONE, TWO, THREE } from \"../../numbers\";\nimport TRUE from \"../../logic/TRUE\";\nimport FALSE from \"../../logic/FALSE\";\nimport AND from \"../../logic/AND\";\nimport OR from \"../../logic/OR\";\nimport IF_THEN_ELSE from \"../../logic/IF_THEN_ELSE\";\n\nconst Logic: FC = () => (\n  <Section heading={\"Logic\"}>\n    <p>The Church encodings for true and false are:</p>\n    <ul>\n      <li>\n        true: <code>λx.λy.x</code>\n      </li>\n      <li>\n        false: <code>λx.λy.y</code>\n      </li>\n    </ul>\n    <p>\n      Both of these take in two arguments (remember, they're curried). True\n      returns the first, false returns the second. As React components:\n      <CodeBlock>\n        {`const TRUE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={x => y => x} args={args} />\n);\n\nconst FALSE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction λ={x => y => y} args={args} />\n);`}\n      </CodeBlock>\n      And here they are in action. Again, the right side of the arrow is the\n      output of the JSX being rendered:\n      <CodeBlock>\n        <Label name=\"TRUE\" /> <Label name=\"ZERO\" /> <Label name=\"ONE\" /> →{\" \"}\n        <TRUE args={[ZERO, ONE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"FALSE\" /> <Label name=\"ONE\" /> <Label name=\"TWO\" /> →{\" \"}\n        <FALSE args={[ONE, TWO]} />\n      </CodeBlock>\n    </p>\n    <p>\n      Here's a more complex example composing everything we have so far:\n      <CodeBlock>\n        <Label name=\"IDENTITY\" /> (<Label name=\"TRUE\" /> (<Label name=\"FALSE\" />{\" \"}\n        <Label name=\"ONE\" /> <Label name=\"TWO\" />) <Label name=\"THREE\" />) →{\" \"}\n        <IDENTITY\n          args={[<TRUE args={[<FALSE args={[ONE, TWO]} />, THREE]} />]}\n        />\n      </CodeBlock>\n      Click on all the labels for that one to see how it looks as lambda\n      expressions. The labels reuse variables, so it is a bit confusing. This\n      doesn't cause an issue for us since all of our variables are bound. The\n      JSX for this example:\n      <CodeBlock>\n        {`<IDENTITY\n  args={[<TRUE args={[<FALSE args={[ONE, TWO]} />, THREE]} />]}\n/>`}\n      </CodeBlock>\n    </p>\n    <p>\n      Given the preceding Church encodings for true and false, here are the\n      lambda expressions for and and or:\n    </p>\n    <ul>\n      <li>\n        and: <code>λp.λq.p q p</code>\n      </li>\n      <li>\n        or: <code>λp.λq.p p q</code>\n      </li>\n    </ul>\n    <p>\n      Both of these take two arguments and these arguments should be{\" \"}\n      <code>\n        <Label name=\"TRUE\" />\n      </code>{\" \"}\n      or{\" \"}\n      <code>\n        <Label name=\"FALSE\" />\n      </code>\n      . These were a little tricky the first time I encountered them. Here are\n      the four possibilities of what happens with{\" \"}\n      <code>\n        <Label name=\"AND\" />\n      </code>\n      :\n    </p>\n    <ul>\n      <li>\n        If{\" \"}\n        <code>\n          <Label name=\"TRUE\" />\n        </code>{\" \"}\n        is passed in as both <code>p</code> and <code>q</code> then it, as{\" \"}\n        <code>p</code>, is called on both arguments and it returns the first,\n        which is{\" \"}\n        <code>\n          <Label name=\"TRUE\" />\n        </code>\n        .\n      </li>\n      <li>\n        If{\" \"}\n        <code>\n          <Label name=\"TRUE\" />\n        </code>{\" \"}\n        is passed in as <code>p</code> and{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>{\" \"}\n        is passed in as <code>q</code> then{\" \"}\n        <code>\n          <Label name=\"TRUE\" />\n        </code>\n        , as <code>p</code>, is called on both arguments and it returns the\n        first, which is <code>q</code>, or{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>\n        .\n      </li>\n      <li>\n        If{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>{\" \"}\n        is passed in as both <code>p</code> and <code>q</code> then it, as{\" \"}\n        <code>p</code>, is called on both arguments and it returns the second,\n        which is{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>\n        .\n      </li>\n      <li>\n        If{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>{\" \"}\n        is passed in as <code>p</code> and{\" \"}\n        <code>\n          <Label name=\"TRUE\" />\n        </code>{\" \"}\n        is passed in as <code>q</code> then{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>\n        , as <code>p</code>, is called on both arguments and it returns the\n        second, which is <code>p</code>, or{\" \"}\n        <code>\n          <Label name=\"FALSE\" />\n        </code>\n        .\n      </li>\n    </ul>\n    <p>\n      Here's our little lambda truth table for{\" \"}\n      <code>\n        <Label name=\"AND\" />\n      </code>\n      <CodeBlock>\n        <Label name=\"AND\" /> (<Label name=\"TRUE\" /> <Label name=\"TRUE\" />\n        ) → <AND args={[TRUE, TRUE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"AND\" /> (<Label name=\"TRUE\" /> <Label name=\"FALSE\" />\n        ) → <AND args={[TRUE, FALSE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"AND\" /> (<Label name=\"FALSE\" /> <Label name=\"FALSE\" />\n        ) → <AND args={[FALSE, FALSE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"AND\" /> (<Label name=\"FALSE\" /> <Label name=\"TRUE\" />\n        ) → <AND args={[FALSE, TRUE]} />\n      </CodeBlock>\n      And the React component:\n      <CodeBlock>\n        {`const AND: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={p => q => p({ args: [q, p] })}\n    args={args}\n  />\n);`}\n      </CodeBlock>\n    </p>\n    <p>\n      <code>\n        <Label name=\"OR\" />\n      </code>{\" \"}\n      functions similarly. I leave it to the reader to work through it how we\n      did for{\" \"}\n      <code>\n        <Label name=\"AND\" />\n      </code>\n      . But, here's our little lambda truth table:\n      <CodeBlock>\n        <Label name=\"OR\" /> (<Label name=\"TRUE\" /> <Label name=\"TRUE\" />\n        ) → <OR args={[TRUE, TRUE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"OR\" /> (<Label name=\"TRUE\" /> <Label name=\"FALSE\" />\n        ) → <OR args={[TRUE, FALSE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"OR\" /> (<Label name=\"FALSE\" /> <Label name=\"FALSE\" />\n        ) → <OR args={[FALSE, FALSE]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"OR\" /> (<Label name=\"FALSE\" /> <Label name=\"TRUE\" />\n        ) → <OR args={[FALSE, TRUE]} />\n      </CodeBlock>\n      And again, the React component:\n      <CodeBlock>\n        {`const OR: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={p => q => p({ args: [p, q] })}\n    args={args}\n  />\n);`}\n      </CodeBlock>\n      Notice all we did was switch the order of the arguments.\n    </p>\n    <p>Here is the lambda expression to represent branching logic:</p>\n    <ul>\n      <li>\n        if...then...else: <code>λp.λa.λb.p a b</code>\n      </li>\n    </ul>\n    <p>\n      Given an argument <code>p</code> which is either{\" \"}\n      <code>\n        <Label name=\"TRUE\" />\n      </code>{\" \"}\n      or{\" \"}\n      <code>\n        <Label name=\"FALSE\" />\n      </code>\n      , this lambda will apply it to <code>a</code> and <code>b</code>. Well, we\n      know how the boolean lambdas work. If <code>p</code> is{\" \"}\n      <code>\n        <Label name=\"TRUE\" />\n      </code>{\" \"}\n      it will return the first argument, <code>a</code>. And vice versa if{\" \"}\n      <code>p</code> is{\" \"}\n      <code>\n        <Label name=\"FALSE\" />\n      </code>\n      .\n      <CodeBlock>\n        <Label name=\"IF_THEN_ELSE\" /> (<Label name=\"TRUE\" /> (\n        <Label name=\"ONE\" /> <Label name=\"TWO\" />\n        )) → <IF_THEN_ELSE args={[TRUE, ONE, TWO]} />\n      </CodeBlock>\n      <CodeBlock>\n        <Label name=\"IF_THEN_ELSE\" /> (<Label name=\"FALSE\" /> (\n        <Label name=\"ONE\" /> <Label name=\"TWO\" />\n        )) → <IF_THEN_ELSE args={[FALSE, ONE, TWO]} />\n      </CodeBlock>\n      And finally, the React component implementation of branching logic in\n      lambda calculus:\n      <CodeBlock>\n        {`const IF_THEN_ELSE: FC<LambdaExprProps> = ({ args }) => (\n  <βReduction\n    λ={p => a => b => p({ args: [a, b] })}\n    args={args}\n  />\n);\n`}\n      </CodeBlock>\n    </p>\n  </Section>\n);\n\nexport default Logic;\n","import React, { FC } from \"react\";\n// import CodeBlock from \"../../CodeBlock\";\nimport Section from \"../../Section\";\n// import Label from \"../../Label\";\n// import { ONE, TWO } from \"../../numbers\";\n// import PAIR from \"../../pairs/PAIR\";\n// import FIRST from \"../../pairs/FIRST\";\n// import SECOND from \"../../pairs/SECOND\";\n\nconst Pairs: FC = () => (\n  <Section heading={\"Pairs\"}>\n    <p>In progress...</p>\n    {/* <CodeBlock>\n      <Label name=\"PAIR\" /> (<Label name=\"ONE\" /> <Label name=\"TWO\" />) → HoC{\" \"}\n      {PAIR({ args: [ONE, TWO] })}\n    </CodeBlock>\n    <CodeBlock>\n      <Label name=\"FIRST\" /> (<Label name=\"PAIR\" /> (\n      <Label name=\"ONE\" /> <Label name=\"TWO\" />\n      )) → <FIRST args={[PAIR({ args: [ONE, TWO] })]} />\n    </CodeBlock>\n    <CodeBlock>\n      <Label name=\"SECOND\" /> (<Label name=\"PAIR\" /> (\n      <Label name=\"ONE\" /> <Label name=\"TWO\" />\n      )) → <SECOND args={[PAIR({ args: [ONE, TWO] })]} />\n    </CodeBlock> */}\n  </Section>\n);\n\nexport default Pairs;\n","import React, { FC } from \"react\";\nimport Section from \"../../Section\";\nimport Link from \"../../Link\";\n\nconst Recursion: FC = () => (\n  <Section heading={\"Recursion\"}>\n    <p>In progress... One day, maybe.</p>\n    <p></p>\n    <p></p>\n    <p>\n      Feedback? Email{\" \"}\n      <Link to=\"mailto:vgabruzzo@gmail.com\" external={false}>\n        vgabruzzo@gmail.com\n      </Link>\n    </p>\n  </Section>\n);\n\nexport default Recursion;\n","import React, { FC } from \"react\";\nimport Link from \"./components/Link\";\nimport Introduction from \"./components/sections/Introduction\";\nimport Basics from \"./components/sections/Basics\";\nimport Numbers from \"./components/sections/Numbers\";\nimport Logic from \"./components/sections/Logic\";\nimport Pairs from \"./components/sections/Pairs\";\nimport Recursion from \"./components/sections/Recursion\";\nimport \"./App.css\";\n\nconst App: FC = () => (\n  <div className=\"App\">\n    <header className=\"App-header\">\n      <h1 className=\"h1\">Lambda Calculus in React</h1>\n      <p className=\"githubLink\">\n        <Link to=\"https://github.com/thoughtbyte/lambda-calculus-in-react\">\n          repo\n        </Link>\n      </p>\n    </header>\n    <main>\n      <Introduction />\n      <Basics />\n      <Numbers />\n      <Logic />\n      <Pairs />\n      <Recursion />\n    </main>\n  </div>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      process.env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}